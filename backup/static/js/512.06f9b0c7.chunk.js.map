{"version":3,"file":"static/js/512.06f9b0c7.chunk.js","mappings":"mNAWO,SAASA,IACZ,MAAMC,GAAIC,EAAAA,EAAAA,OACHC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAqB,KAChDC,EAAUC,IAAeF,EAAAA,EAAAA,YAE1BG,GAAaC,EAAAA,EAAAA,UAAQ,IAChB,CAAC,CAACC,MAAO,KAAMC,MAAO,sLAAqCC,OAC9DT,EAAUU,KAAIC,IAAE,CAAMJ,MAAOI,EAAGC,GAAIJ,MAAO,GAAGG,EAAGE,WAAWF,EAAGG,gBAEpE,CAACd,IAgCJ,OA7BAe,EAAAA,EAAAA,YAAU,MACHf,EAAUgB,QAAWlB,EAAEmB,MAC1BC,EAAAA,EAAYC,aAAarB,GACpBsB,MAAKC,IACFC,QAAQC,IAAI,qBACZD,QAAQC,IAAIF,GACZpB,EAAaoB,EAAE,IAElBG,MAAMC,EAAAA,EAAaC,YAAY5B,GAAG,GACxC,CAACA,EAAGE,IAiBPsB,QAAQC,IAAIpB,IAIRwB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASC,SAAA,EACpBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,UAC3BC,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAAAF,SAAC,yGAEXC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,UAC5BC,EAAAA,EAAAA,KAACE,EAAAA,EAAS,CAAAH,UACNC,EAAAA,EAAAA,KAACG,EAAAA,EAAY,CACTC,aAAc7B,EAAW,GACzB8B,QAAS9B,EACT+B,SAAUf,GA3B9B,SAAsBgB,GAClB,IAAIA,GAAW,OAANA,EAEL,YADAjC,OAAYkC,GAGhB,MAAMC,EAAIvC,EAAUwC,MAAKD,GAAKA,EAAE3B,KAAOyB,IAKvCjC,EAJImC,QACYD,EAIpB,CAgBmCG,CAAc,OAADpB,QAAC,IAADA,OAAC,EAADA,EAAGd,eAMvD,CAEA,S","sources":["pages/TestPage/TestPage.tsx"],"sourcesContent":["import {useEffect, useMemo, useState} from \"react\";\r\n\r\nimport {CustomSelect} from \"../../components/CustomSelect\";\r\nimport {ErrorService, TaskService} from \"../../services\";\r\nimport {useAppContext} from \"../../context/AppContext\";\r\nimport {Container} from \"../../components/Container\";\r\nimport {TaskType} from \"../../classes/TaskType\";\r\nimport {Title} from \"../../components/Title\";\r\n\r\nimport './TestPage.css'\r\n\r\nexport function TestPage() {\r\n    const s = useAppContext()\r\n    const [taskTypes, setTaskTypes] = useState<TaskType[]>([])\r\n    const [selected, setSelected] = useState<TaskType | undefined>()\r\n\r\n    const selectData = useMemo(() => {\r\n        return [{value: '-1', label: 'Не планировать дальнейщую работу'}].concat(\r\n            taskTypes.map(tt => ({value: tt.ID, label: `${tt.UF_CODE} ${tt.UF_NAME}`}))\r\n        )\r\n    }, [taskTypes])\r\n\r\n\r\n    useEffect(() => {\r\n        if(taskTypes.length || !s.user) return\r\n        TaskService.getTaskTypes(s)\r\n            .then(r => {\r\n                console.log('getTaskTypes done')\r\n                console.log(r)\r\n                setTaskTypes(r)\r\n            })\r\n            .catch(ErrorService.handleError(s))\r\n    }, [s, taskTypes]);\r\n\r\n\r\n    function handleSelect(v?: string ){\r\n        if(!v || v === '-1') {\r\n            setSelected(undefined)\r\n            return\r\n        }\r\n        const t = taskTypes.find(t => t.ID === v)\r\n        if(!t) {\r\n            setSelected(undefined)\r\n            return\r\n        }\r\n        setSelected(t)\r\n    }\r\n\r\n\r\n    console.log(selected)\r\n\r\n\r\n    return (\r\n        <div className='wrapper'>\r\n            <div className='wrapper-header'>\r\n                <Title>Тестовая страница</Title>\r\n            </div>\r\n            <div className='wrapper-content'>\r\n                <Container>\r\n                    <CustomSelect\r\n                        defaultValue={selectData[0]}\r\n                        options={selectData}\r\n                        onChange={r => handleSelect(r?.value)}\r\n                    />\r\n                </Container>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TestPage"],"names":["TestPage","s","useAppContext","taskTypes","setTaskTypes","useState","selected","setSelected","selectData","useMemo","value","label","concat","map","tt","ID","UF_CODE","UF_NAME","useEffect","length","user","TaskService","getTaskTypes","then","r","console","log","catch","ErrorService","handleError","_jsxs","className","children","_jsx","Title","Container","CustomSelect","defaultValue","options","onChange","v","undefined","t","find","handleSelect"],"sourceRoot":""}