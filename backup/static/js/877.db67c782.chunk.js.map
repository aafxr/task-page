{"version":3,"file":"static/js/877.db67c782.chunk.js","mappings":"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","sources":["pages/NewTask/NewTask.tsx"],"sourcesContent":["import {useNavigate} from \"react-router-dom\";\r\nimport React, {ChangeEvent, useEffect, useMemo, useState} from 'react';\r\n\r\nimport {CustomSelect} from \"../../components/CustomSelect\";\r\nimport {useAppContext} from \"../../context/AppContext\";\r\nimport {DateSelect} from \"../../components/DateSelect\";\r\nimport {Container} from \"../../components/Container\";\r\nimport {Checkbox} from \"../../components/Checkbox\";\r\nimport {TextArea} from \"../../components/TextArea\";\r\nimport {Button} from \"../../components/Button\";\r\nimport {Title} from \"../../components/Title\";\r\nimport {Block} from \"../../components/Block\";\r\nimport {TaskService} from \"../../services\";\r\nimport {Text} from \"../../components/Text\";\r\nimport {Task} from \"../../classes/Task\";\r\nimport {bitrix} from \"../../bitrix\";\r\n\r\nimport './NewTask.css'\r\n\r\n\r\n\r\nexport function NewTask() {\r\n    const navigate = useNavigate()\r\n    const s = useAppContext()\r\n    const [task, setTask] = useState(new Task())\r\n\r\n\r\n    useEffect(() => {\r\n        bitrix.getAuth()\r\n            .then(u => {\r\n                task.responsibleId = '' + u?.user_id\r\n                setTask(new Task(task))\r\n            })\r\n    }, []);\r\n\r\n\r\n    const selectPersonData = useMemo(() => {\r\n        return [{value: '-1', label: '-'}].concat(Array.from(s.persons.values()).map(p => ({\r\n            value: p.ID,\r\n            label: `${p.LAST_NAME} ${p.NAME}`\r\n        })))\r\n    }, [s.persons])\r\n\r\n\r\n    function handleTitleChange(e: ChangeEvent<HTMLTextAreaElement>) {\r\n        const nextState = new Task(task)\r\n        nextState.title = e.target.value\r\n        setTask(nextState)\r\n    }\r\n\r\n\r\n    function handleReportChange(e: ChangeEvent<HTMLTextAreaElement>) {\r\n        const nextState = new Task(task)\r\n        nextState.description = e.target.value\r\n        setTask(nextState)\r\n    }\r\n\r\n\r\n    function handleSelectDate(e: ChangeEvent<HTMLInputElement>) {\r\n        const d = e.target.valueAsDate\r\n        if (!d) return\r\n        d.setHours(23, 30, 0, 0)\r\n        const nextState = new Task(task)\r\n        nextState.deadline = d\r\n        setTask(nextState)\r\n    }\r\n\r\n\r\n    function handleImportant(e: ChangeEvent<HTMLInputElement>) {\r\n        const nextState = new Task(task)\r\n        nextState.important = e.target.checked\r\n        setTask(nextState)\r\n    }\r\n\r\n\r\n    function handleUrgent(e: ChangeEvent<HTMLInputElement>) {\r\n        const nextState = new Task(task)\r\n        nextState.urgent = e.target.checked\r\n        setTask(nextState)\r\n    }\r\n\r\n\r\n    function handleResponsiblePerson(personID?: string) {\r\n        const nextState = new Task(task)\r\n        nextState.responsibleId = personID || '-1'\r\n        setTask(nextState)\r\n    }\r\n\r\n\r\n    function handleReject(){\r\n        navigate('/')\r\n    }\r\n\r\n\r\n    function handleSave(){\r\n        if(!task.title){\r\n            alert('Укажите название задачи')\r\n            return\r\n        }\r\n        if(!task.description){\r\n            alert('Укажите цель задачи')\r\n            return\r\n        }\r\n        if (!task.responsibleId || task.responsibleId === '-1'){\r\n            alert('Укажите ответственного')\r\n            return\r\n        }\r\n        if (!task.deadline){\r\n            alert('Укажите крайний срок')\r\n            return\r\n        }\r\n\r\n        TaskService.add(s, task)\r\n            .then(() => navigate('/'))\r\n            .then(() => TaskService.getTasks(s))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='wrapper'>\r\n            <div className='wrapper-header'>\r\n                <Title>Поставить задачу</Title>\r\n            </div>\r\n            <div className='wrapper-content'>\r\n                <Container>\r\n                    <Block className='newTask'>\r\n                        <div className='ui-form-row'>\r\n                            <Text>Название:</Text>\r\n                            <TextArea\r\n                                className='report-text'\r\n                                cols={40}\r\n                                rows={3}\r\n                                value={task.title}\r\n                                placeholder={'Название задачи'}\r\n                                onChange={handleTitleChange}\r\n                            />\r\n                        </div>\r\n                        <div className='ui-form-row'>\r\n                            <Text>Цель:</Text>\r\n                            <TextArea\r\n                                className='report-text'\r\n                                cols={40}\r\n                                rows={6}\r\n                                value={task.description}\r\n                                placeholder={'Цель задачи'}\r\n                                onChange={handleReportChange}\r\n                            />\r\n                        </div>\r\n                        <div className='ui-form-row'>\r\n                            <Text>Срок:</Text>\r\n                            <DateSelect\r\n                                value={task.deadline?.toISOString().split('T')[0]}\r\n                                onChange={handleSelectDate}/>\r\n                        </div>\r\n\r\n                        <div className='ui-form-row'>\r\n                            <Checkbox label='Важная задача' checked={task.important}\r\n                                      onChange={handleImportant}/>\r\n                        </div>\r\n                        <div className='ui-form-row'>\r\n                            <Checkbox label='Срочная задача' checked={task.urgent}\r\n                                      onChange={handleUrgent}/>\r\n                        </div>\r\n                        <div className='ui-form-row'>\r\n                            <Text>Ответственный</Text>\r\n                            <CustomSelect\r\n                                defaultValue={selectPersonData[0]}\r\n                                options={selectPersonData}\r\n                                onChange={r => handleResponsiblePerson(r?.value)}\r\n                            />\r\n                        </div>\r\n                    </Block>\r\n                </Container>\r\n            </div>\r\n            <div className='wrapper-footer'>\r\n                <div className='footer-btns'>\r\n                    <Button className='active-btn' onClick={handleSave}>Создать</Button>\r\n                    <Button onClick={handleReject}>Закрыть</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NewTask\r\n\r\n"],"names":["NewTask","_task$deadline","navigate","useNavigate","s","useAppContext","task","setTask","useState","Task","useEffect","bitrix","getAuth","then","u","responsibleId","user_id","selectPersonData","useMemo","value","label","concat","Array","from","persons","values","map","p","ID","LAST_NAME","NAME","_jsxs","className","children","_jsx","Title","Container","Block","Text","TextArea","cols","rows","title","placeholder","onChange","e","nextState","target","description","DateSelect","deadline","toISOString","split","d","valueAsDate","setHours","Checkbox","checked","important","urgent","CustomSelect","defaultValue","options","r","personID","handleResponsiblePerson","Button","onClick","TaskService","add","getTasks","alert"],"sourceRoot":""}